html{
    font-size: 62.5%;
}

body{
    margin: 0;
    font-family: 'Poppins';
}
.wrapper {
    max-width: 1200px;
    margin: 0 auto;  /*this auto centres the items. the 0 is for top and bottom*/
}

/*navbar*/
header{
    display: flex; /*flexbox*/ /*make them same row*/
    justify-content: space-between;
    align-items: center;
}

header img{
    width: 50%;
    height: auto

}

nav{
    margin:4em;
}
nav ul{
    list-style-type: None;
    display:flex;
    gap: 4.1em;
    margin: 0;
}

nav ul li a{
    text-decoration:None;
    color: black;
    text-transform: uppercase;
    font: 1.6rem;
    position: relative;
}

nav ul li a.active::before{
    position: absolute;
    content: "";
    width: 35%;
    height: 1px;
    border-bottom: 2px solid black;
    bottom: -6px
}

nav ul li a::before{
    position: absolute;
    content: "";
    width: 0%;
    height: 1px;
    border-bottom: 2px solid rgb(122,122,122);
    bottom: -6px;
    transition: width .3s
}

main{
    display:flex;
    gap: 8em;
    margin-top: 11em;
}

.left-column{
    width: 45%
}
.right-column{
    flex-grow: 1;
}
h1{
    font-size: 5.2rem;
    font-family: 'Playfair Display';
    font-weight: normal;
    margin: 0;
}
.subhead{
    font-size:1.8rem;
}

.cta-btns, .secondary-cta{
    display: flex;
    gap: 2em;
}

.primary-cta{
    background-color: #F1E2D1;
    font-size: 1.8rem;
    font-weight:bold;
    color: black;
    text-decoration: None;
    border-radius: 1.9em;
    padding: 1em 2em;

}

.secondary-cta{
    font-size: 1.8rem;
    text-decoration: None;
    color: black;
    display:block;
    padding:1em 0;
    align-items: center;
}

.cta-btns{
    margin: 5em 0;
}

.news{
    display:flex;
    gap: 3em;
    padding: 5em;
    border: 1px solid black;
    border-radius: .8em;

}

p.employees{
    font-size: 3.3rem;
    margin: 0;
    font-weight:200;
    line-height: 100%;
}
.details{
    font-size: 1.4rem;
    margin: 0px;
}

/* right column gallery*/

.right-column{
    display: grid;
    gap: 2.3em;
    grid-template-columns: auto auto; /*number of auto means number of columns repeat(2,auto)*/
    grid-template-areas: 
        "left right"
        "left bottom"; /* make the shape that u want the rows and col*/
}

.card{
    background: white;
    border-radius: .8em;
    padding: 1.1em;
    display: flex;  /* to use align-items, use display flex first. 
    The display: flex; property in CSS is used to create a flex container.
    When applied to an element, it changes the layout behavior of its children, making them flex items.
    One of the key features of a flex container is that it places its children (flex items) in a row (or column) by default,
    bringing them to the same level along the main axis. */
    align-items: end;
    background-size:150%;
    transition: background-size 800ms;
}

.card1{
    grid-area: left;  /* assign the grid area for card1 to the left so itll take on the left in the grid template area*/
    background-image: url('images/clothing1.jpg');
    position: relative
}
.card1:before{
    position:absolute;
    content: "";
    background: url('images/tag.svg') no-repeat;
    width: 100%;
    height: 100%;
    top: 20px;
    left: -30px;
    pointer-events: none;


}
.card2{             
    background-image: url('images/clothing2.jpg');
}
.card3{
    background-image: url('images/clothing3.jpg');
}

.card-details{
    background: white;
    border-radius: .6em;
    padding: 2em;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content:space-between;
    transition: transform 800ms;
}

.card-details a{
    color: black;
    text-decoration: none;
    font-size: 1.6rem;
    font-weight: bold;
}

.card-details p{
    font-size:1.4rem;
    margin:0;
}
p.product-price{
    font-size: 1.8rem;
}

/*microinteractions*/

nav ul li a:hover:before{
    width: 35%
}
.primary-cta:hover{
    background-color: #e2d18d;
}
.secondary-cta:hover{
    text-decoration: underline;
}

.card:hover{
    background-size: 160%;
}

.card:hover .card-details{
    transform: translateY(-20px);
}

.overlay{
    position: absolute;
    z-index: 999;
    background: white;
    width:100%;
    height: 100%;
    animation: reveal 1s ease-in forwards;
    transform-origin: bottom;

}

@keyframes reveal{
    from{
        transfrom: scaleY(1)
    }
    to{
        transform: scaleY(0)
    }
}

main{
    animation: growIn 2s cubic-bezier(0.075, 0.82, 0.165, 1) forwards;
    transform: scale(.4)
}

@keyframes growIn{
    to{
        transform: scale(1);
    }
}